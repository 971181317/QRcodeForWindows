{"version":3,"file":"main.bundle.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,cCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,MCrBf,IA4DIQ,EA5DJ,SAEA,SAASC,IACL,IAAMC,EAAM,IAAI,EAAAC,cAAc,CAC1BC,MAAO,IACPC,OAAQ,IAMRC,WAAW,EAEXC,aAAa,EAEbC,cAAe,SAEfC,gBAAiB,CACbC,MAAO,UACPC,YAAa,WAEjBC,MAAM,IASVV,EAAIW,SAAS,mBAEbX,EAAIY,YAAYC,aAAa,CAAEC,KAAM,aACrCd,EAAIe,KAAK,iBAAiB,WACtBf,EAAIU,UA4BZ,EAAAM,IAAIC,YAAYC,MAAK,WACjBnB,IAEA,EAAAiB,IAAIG,GAAG,YAAY,WAC8B,IAAzC,EAAAlB,cAAcmB,gBAAgBC,QAC9BtB,OAIR,IAAMuB,EAAO,EAAAC,YAAYC,eAAe,qBAGxC1B,EAAO,IAAI,EAAA2B,KAAKH,GAGhB,IAAMI,EAAc,EAAAC,KAAKC,kBAAkB,CAAC,CACpCC,MAAO,KACPC,KAAM,SACNC,MAAO,SAACC,EAAgBC,EAAqBC,GA1CzD,IACUlC,GAAAA,EAAM,IAAI,EAAAC,cAAc,CAC1BC,MAAO,IACPC,OAAQ,IACRC,WAAW,EAEXC,aAAa,EAEbC,cAAe,SACfI,MAAM,KAINC,SAAS,mBACbX,EAAIe,KAAK,iBAAiB,WACtBf,EAAIU,UAERV,EAAImB,GAAG,QAAQ,WACXnB,EAAImC,aA4BJ,CAAEN,MAAO,KAAMC,KAAM,SAAUM,KAAM,UAGzCtC,EAAKuC,eAAeX,GAEpB5B,EAAKwC,WAAW,oBAChBxC,EAAKyC,SAAS,uBAGlB,EAAAvB,IAAIG,GAAG,qBAAqB,WACC,WAArBqB,QAAQC,UACR,EAAAzB,IAAI0B,W","sources":["webpack://qrcode_for_windows/external node-commonjs \"electron\"","webpack://qrcode_for_windows/webpack/bootstrap","webpack://qrcode_for_windows/./src/main.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { app, BrowserWindow, ipcMain, Tray, Menu, nativeImage, dialog } from 'electron';\r\n\r\nfunction createMainWindow():void {\r\n    const win = new BrowserWindow({\r\n        width: 800,\r\n        height: 500,\r\n        // 前置脚本\r\n        // webPreferences: {\r\n        //     preload: path.join(__dirname, 'src/preload.js')\r\n        // },\r\n        // 不可调节窗口大小\r\n        resizable: false,\r\n        // 不可最大化\r\n        minimizable: false,\r\n        // 隐藏titleBar\r\n        titleBarStyle: 'hidden',\r\n        // 显示titleBar的按钮\r\n        titleBarOverlay: {\r\n            color: '#2f3241',\r\n            symbolColor: '#74b1be'\r\n        },\r\n        show: false,\r\n        //解决窗口引入nodejs语法隔离问题\r\n        // webPreferences:{ \r\n        //     nodeIntegration: true, \r\n        //     contextIsolation: false \r\n        // }\r\n            // transparent: true\r\n    })\r\n\r\n    win.loadFile('html/index.html');\r\n\r\n    win.webContents.openDevTools({ mode: 'undocked' });\r\n    win.once('ready-to-show', () => {\r\n        win.show()\r\n    })\r\n}\r\n\r\nfunction createAboutWindow():void {\r\n    const win = new BrowserWindow({\r\n        width: 260,\r\n        height: 130,\r\n        resizable: false,\r\n        // 不可最大化\r\n        minimizable: false,\r\n        // 隐藏titleBar\r\n        titleBarStyle: 'hidden',\r\n        show: false\r\n            // transparent: true\r\n    })\r\n\r\n    win.loadFile('html/about.html');\r\n    win.once('ready-to-show', () => {\r\n        win.show()\r\n    });\r\n    win.on(\"blur\", () => {\r\n        win.close();\r\n    });\r\n}\r\n\r\nlet tray\r\n\r\napp.whenReady().then(() => {\r\n    createMainWindow()\r\n\r\n    app.on('activate', () => {\r\n        if (BrowserWindow.getAllWindows().length === 0) {\r\n            createMainWindow()\r\n        }\r\n    })\r\n\r\n    const icon = nativeImage.createFromPath('path/to/asset.png')\r\n\r\n    // 设置windows状态栏的图标信息\r\n    tray = new Tray(icon)\r\n\r\n    // 注意: 你的 contextMenu, Tooltip 和 Title 代码需要写在这里!\r\n    const contextMenu = Menu.buildFromTemplate([{\r\n            label: '关于',\r\n            type: 'normal',\r\n            click: (_menuItem: any, _browserWindow: any, _event: any) => {\r\n                createAboutWindow()\r\n            }\r\n        },\r\n        { label: '退出', type: 'normal', role: \"quit\" },\r\n    ])\r\n\r\n    tray.setContextMenu(contextMenu)\r\n\r\n    tray.setToolTip('QRcodeForWindows')\r\n    tray.setTitle('QRcodeForWindows')\r\n})\r\n\r\napp.on('window-all-closed', () => {\r\n    if (process.platform !== 'darwin') {\r\n        app.quit()\r\n    }\r\n})"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","tray","createMainWindow","win","BrowserWindow","width","height","resizable","minimizable","titleBarStyle","titleBarOverlay","color","symbolColor","show","loadFile","webContents","openDevTools","mode","once","app","whenReady","then","on","getAllWindows","length","icon","nativeImage","createFromPath","Tray","contextMenu","Menu","buildFromTemplate","label","type","click","_menuItem","_browserWindow","_event","close","role","setContextMenu","setToolTip","setTitle","process","platform","quit"],"sourceRoot":""}